buildscript {
    ext {
        springBootVersion = "2.0.3.RELEASE"
        activitiVersion = "6.0.0"
        swaggerVersion = "2.7.0"
        mockito_version = '2.0.0-beta.5'
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "http://central.maven.org/maven2" }

    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.6.2")
        classpath("org.owasp:dependency-check-gradle:3.3.1")
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2")
    }
}

apply plugin: "java"
apply plugin: "idea"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "com.github.spotbugs"
apply plugin: "checkstyle"
apply plugin: "pmd"
apply plugin: "org.owasp.dependencycheck"
apply plugin: "org.sonarqube"
apply plugin: "jacoco"

version = "0.0.1-SNAPSHOT"
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
    maven { url "http://central.maven.org/maven2" }
}

bootJar {
    launchScript()
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-aop")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-data-redis")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-data-rest")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-devtools")
//    compile("com.google.code.gson:gson:2.8.1")
    compile("com.nimbusds:nimbus-jose-jwt:5.9")
    compile("com.alibaba:fastjson:1.2.47")
    compile("com.aliyun:aliyun-java-sdk-core:3.7.1")
    compile("com.aliyun:aliyun-java-sdk-dysmsapi:1.1.0")
    compile("com.aliyun.oss:aliyun-sdk-oss:2.8.3")
    compile("com.google.guava:guava:25.1-jre")
    compile("org.flywaydb:flyway-core")
    compile("org.activiti:activiti-spring-boot-starter-basic:${activitiVersion}")
    compile("org.activiti:activiti-spring-boot-starter-actuator:${activitiVersion}")
    compile("org.activiti:activiti-spring-boot-starter-rest-api:${activitiVersion}") {
        exclude group: 'org.springframework.security'
    }
    compile group: 'net.minidev', name: 'json-smart', version: '2.3'
    compile("org.activiti:activiti-json-converter:${activitiVersion}")
    runtime("mysql:mysql-connector-java")
    compileOnly("org.projectlombok:lombok:1.16.20")
    compile("io.springfox:springfox-swagger2:${swaggerVersion}")
    compile("io.springfox:springfox-swagger-ui:${swaggerVersion}")
    compile("org.apache.httpcomponents:httpclient-cache:4.3.4")
    compile("com.github.xiaoymin:swagger-bootstrap-ui:1.7.6")
    compile("org.apache.commons:commons-jexl:2.0")
//    compile ('io.jsonwebtoken:jjwt:0.7.0')
    compile("org.apache.poi:poi:4.0.0")
    compile("org.owasp.encoder:encoder:1.2.2")
    compile("net.logstash.logback:logstash-logback-encoder:5.2")

    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("org.springframework.restdocs:spring-restdocs-mockmvc")
    testCompile("org.springframework.security:spring-security-test")
    testCompile("org.testng:testng:6.14.3")
    testCompile group: 'org.powermock', name: 'powermock-api-mockito2', version: "${mockito_version}"
    testCompile group: 'org.powermock', name: 'powermock-module-testng', version: "${mockito_version}"
    testCompile group: 'org.powermock', name: 'powermock-core', version: "${mockito_version}"
    testCompile group: 'net.bytebuddy', name: 'byte-buddy', version: '1.8.17'
    testCompile group: 'net.bytebuddy', name: 'byte-buddy-agent', version: '1.8.17'
    testCompile group: 'org.objenesis', name: 'objenesis', version: '2.6'
    testCompile group: 'org.powermock', name: 'powermock-classloading-xstream', version: "${mockito_version}"
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile 'org.hamcrest:hamcrest-integration:1.3'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

checkstyle {
    configFile = file("$rootProject.projectDir/src/main/resources/check-style.xml")
    toolVersion = "8.11"
}

spotbugs {
    excludeFilter = file("$rootProject.projectDir/src/main/resources/spotbugs-exclude-filter.xml")
}

pmd {
    ruleSets = ["java-basic",
                "java-braces",
                "java-clone",
//                "java-codesize",
//                "java-comments",
//                "java-controversial",
//                "java-coupling",
//                "java-design",
                "java-empty",
                "java-finalizers",
                "java-imports",
                "java-j2ee",
//                "java-javabeans",
                "java-junit",
                "java-logging-jakarta-commons",
                "java-logging-java",
//                "java-metrics",
//                "java-naming",
//                "java-optimizations",
                "java-strictexception",
//                "java-strings",
                "java-sunsecure",
                "java-typeresolution",
                "java-unnecessary",
                "java-unusedcode"]
}
/*dependencyCheck {

    autoUpdate=true
    cveValidForHours=4
    format='ALL'
    outputDirectory="$buildDir/owasp/report/"
    data {
        directory='/home/nvd'
    }
    proxy {
        server=some.proxy.server
        port=8989
    }
}
check.dependsOn dependencyCheckAnalyze*/

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
        html.destination "${buildDir}/jacoco/reports/coverage"
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "hcm"
        property "sonar.projectKey", "hcm"
        property 'sonar.host.url', 'http://sonar.youzhao.io'
        //property 'sonar.login', '6222d90fbf623577b8b17a74f1c00d1326c961f6'
        property 'sonar.login', 'admin'
        property 'sonar.password', 'klaxon_tumbler_instep_wildcat_botan'
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.jacoco.reportPaths", "${buildDir}/jacoco/reports/test/test.exec"
        property "sonar.junit.reportsPath", test.reports.junitXml.destination
        property "sonar.coverage.exclusions", "*Test.java"
        //property "sonar.dependencyCheck.reportPath", "${buildDir}/owasp/report/dependency-check-report.xml"
        //property "sonar.dependencyCheck.html.reportPath", "${buildDir}/owasp/report/dependency-check-report.html"
    }
}

test {
    ignoreFailures = true
    useTestNG {
        preserveOrder true
        suites 'src/test/resources/testng2.xml'
    }
    jacoco{
        append = false
        destinationFile = file("$buildDir/jacoco/reports/test/test.exec")
    }
    reports.html.enabled = true
    testLogging.showStandardStreams = true
    systemProperties = System.getProperties()
    maxHeapSize = '1500m'
}